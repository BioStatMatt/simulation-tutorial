require(knitr)
require(DiagrammeR)
a <- grViz("
digraph boxes_and_circles {
graph [rankdir = LR]
edge [ constraint=false ];
node [shape = circle, label = '(Unknown)\nParameters'] A
subgraph cluster2 {
label = '';
rankdir = LR;
node [shape = box, label = 'Collect data', width = 2, height = 1] B;
node [shape = box, label = 'Analyze data\n Make conclusion', width = 2] C;
node [shape = box, label = 'Compare conclusion\nto truth\nError/No error?', style = invis, width = 2] D;
B -> C [constraint = true];
C -> D [constraint = true, style = invis];
color = white;
}
node [shape = circle, label = 'Calculate\nerror\nrate', style = invis] E;
// cluster external horizontal order
A -> B [constraint=true];
D -> E [constraint=true, style = invis];
A -> D [tailport = se, headport = s, style = invis]
}
")
a$height <- "auto"
a
b <- grViz("
digraph boxes_and_circles {
graph [rankdir = LR]
edge [ constraint=false ];
node [shape = circle, label = 'Set\nParameters'] A
subgraph cluster2 {
label = 'Repeat M times';
rankdir = LR;
node [shape = box, label = 'Generate data', width = 2, height = 1] B;
node [shape = box, label = 'Analyze data\n Make conclusion', width = 2] C;
node [shape = box, label = 'Compare conclusion\nto truth\nError/No error?', width = 2] D;
B -> C [constraint = true];
C -> D [constraint = true];
color = blue;
}
node [shape = circle, label = 'Calculate\nerror\nrate'] E;
// cluster external horizontal order
A -> B [constraint=true];
D -> E [constraint=true];
A -> D [tailport = se, headport = s]
}
")
b$height <- "auto"
b
c <- grViz("
digraph boxes_and_circles {
graph [rankdir = LR]
edge [ constraint=false ];
node [shape = circle, label = 'Parameters:\nc(N=100, Î¸=1)', fontname = 'monospace'] A
subgraph cluster2 {
label = 'Repeat M times';
rankdir = LR;
node [shape = box, label = 'generate_data()', width = 2, height = 1, fontname = 'monospace'] B;
node [shape = box, label = 'analysis()', width = 2] C;
node [shape = box, label = 'oper_char()', width = 2] D;
B -> C [constraint = true];
C -> D [constraint = true];
color = blue;
}
node [shape = circle, label = 'mean()', fontname = 'monospace'] E;
// cluster external horizontal order
A -> B [constraint=true];
D -> E [constraint=true];
A -> D [tailport = se, headport = s]
}
")
c$height <- "auto"
c
parameters <- c(N = 150, trt_effect = 1)
generate_data <- function(parameters){
N <- parameters[1]
trt_effect <- parameters[2]
trt <- rep(0:1, each = N)
G <- rbinom(2*N, 1, p = 0.75)
means <- 4 - 1 - trt_effect*trt
Y_tmp <- 1 + rexp(2*N, 1/means) %>% floor
Y <- Y_tmp*G + 0*(1-G)
data.frame(Y = Y, trt = trt)
}
analysis <- function(D, alpha = 0.05){
wilcox.test(Y~trt, data = D)$p.value < alpha
}
# This function isn't needed for this particular simulation,
# but it might be helpful for the simulation in the qualifying exam.
oper_char <- function(x) 1*x
one_rep <- function(parameters) parameters %>% generate_data %>% analysis %>% oper_char
# Note that sim_params = c(M, parameters)
M_rep <- function(sim_params) replicate(sim_params[1], one_rep(sim_params[2:3]))
ss1 <- expand.grid(
M = 1e4
, N = 150
, trt_effect = seq(0, 2, by = 1/3) %>% round(2)
, power = NA
)
i <- q
i <- 1
ss1[i,1:3] %>% as.numeric %>% M_rep %>% mean
rm(list = ls())
3 %>% `+`(b)
require(DiagrammeR)
3 %>% `+`(b)
3 %>% `+`(4)
?`%>%`
help(package = "DiagrammeR")
require(magrittr)
?require
rm(list = ls())
require(magrittr, quietly = TRUE)
parameters <- c(N = 150, trt_effect = 1)
generate_data <- function(parameters){
N <- parameters[1]
trt_effect <- parameters[2]
trt <- rep(0:1, each = N)
G <- rbinom(2*N, 1, p = 0.75)
means <- 4 - 1 - trt_effect*trt
Y_tmp <- 1 + rexp(2*N, 1/means) %>% floor
Y <- Y_tmp*G + 0*(1-G)
data.frame(Y = Y, trt = trt)
}
analysis <- function(D, alpha = 0.05){
wilcox.test(Y~trt, data = D)$p.value < alpha
}
# This function isn't needed for this particular simulation,
# but it might be helpful for the simulation in the qualifying exam.
oper_char <- function(x) 1*x
one_rep <- function(parameters) parameters %>% generate_data %>% analysis %>% oper_char
# Note that sim_params = c(M, parameters)
M_rep <- function(sim_params) replicate(sim_params[1], one_rep(sim_params[2:3]))
ss1 <- expand.grid(
M = 1e4
, N = 150
, trt_effect = seq(0, 2, by = 1/3) %>% round(2)
, power = NA
)
i <- 1
ss1[i,1:3] %>% as.numeric %>% M_rep %>% mean
require(DiagrammeR)
require(knitr)
a <- grViz("
digraph boxes_and_circles {
graph [rankdir = LR]
edge [ constraint=false ];
node [shape = circle, label = '(Unknown)\nParameters'] A
subgraph cluster2 {
label = '';
rankdir = LR;
node [shape = box, label = 'Collect data', width = 2, height = 1] B;
node [shape = box, label = 'Analyze data\n Make conclusion', width = 2] C;
node [shape = box, label = 'Compare conclusion\nto truth\nError/No error?', style = invis, width = 2] D;
B -> C [constraint = true];
C -> D [constraint = true, style = invis];
color = white;
}
node [shape = circle, label = 'Calculate\nerror\nrate', style = invis] E;
// cluster external horizontal order
A -> B [constraint=true];
D -> E [constraint=true, style = invis];
A -> D [tailport = se, headport = s, style = invis]
}
")
a$height <- "auto"
help(package = "diagrammeR")
help(package = "DiagrammeR")
render_graph(a)
")
a$height <- "auto"
a <- grViz("
digraph boxes_and_circles {
graph [rankdir = LR]
edge [ constraint=false ];
node [shape = circle, label = '(Unknown)\nParameters'] A
subgraph cluster2 {
label = '';
rankdir = LR;
node [shape = box, label = 'Collect data', width = 2, height = 1] B;
node [shape = box, label = 'Analyze data\n Make conclusion', width = 2] C;
node [shape = box, label = 'Compare conclusion\nto truth\nError/No error?', style = invis, width = 2] D;
B -> C [constraint = true];
C -> D [constraint = true, style = invis];
color = white;
}
node [shape = circle, label = 'Calculate\nerror\nrate', style = invis] E;
// cluster external horizontal order
A -> B [constraint=true];
D -> E [constraint=true, style = invis];
A -> D [tailport = se, headport = s, style = invis]
}
")
a$height <- "auto"
render_graph(a)
?html_print
?HTML
require(DiagrammeRsvg)
?export_svg
